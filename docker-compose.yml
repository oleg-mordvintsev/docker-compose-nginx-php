# Обязательный параметр версии интерпретатора для этого файла
version: '3'
# Список сервисов (контейнеров: клиент, сервер, сервер БД), которые необходимо поднять при старте
services:
  # Первым поднимается контейнер с веб сервером nginx - смотри файлы в docker/nginx
  nginx:
    # Директива позволяющая произвести действия при создании контейнера
    build:
      # Директория, из которой необходимо взять файлы настроек для контейнера
      #context: ./docker/nginx
      context: docker/nginx
      # Директива для указания названия файла, если оно не стандартное. В нашем случае не требуется, т.к. оно Dockerfile
      #dockerfile: DockerfileOtherName
      # Команда, которую необходимо выполнить в контейнере.
      #command: whoami
    # Директории, разделитель двоеточие, где первая, локальная директория, вторая в контейнере, содержащие одно и тоже
    volumes:
      # Тире в начале обязательно, это означает список, т.к. подключаемых директорий может быть много
      # `./` в начале означают, что директорию нужно искать относительно текущего файла docker-compose.yml
      - ./app:/webAppDir
    # Имя контейнера, где могут использоваться переменные с файла .env, расположенного в той же директории
    container_name: ${PROJECT_NAME}-nginx
    # В случае остановки, возобновлять работу контейнера
    restart: always
    # Показываем, что мы ждем старта контейнера с php-fpm, а потом стартуем nginx
    depends_on:
      - php-fpm
    # Порты, для проброски, разделитель двоеточие, первый локальный, второй контейнера, смотри docker/nginx/default.conf
    # Если указано 8901:80, то результат http://127.0.0.1:8901/, хотя nginx в контейнере работает на 80 порту
    # Если локальный 80-ый (стандартный) порт не занят, то Вы можете написать 80:80, и переходить на http://127.0.0.1/
    ports:
      - "8901:80"

  # Вторым поднимаем контейнер с php-fpm
  php-fpm:
    # Директива позволяющая произвести действия при создании контейнера
    build:
      # Директория, из которой необходимо взять файлы настроек для контейнера
      #context: ./docker/php-fpm
      context: docker/php-fpm
      # Директива для указания названия файла, если оно не стандартное. В нашем случае не требуется, т.к. оно Dockerfile
      #dockerfile: DockerfileOtherName
      # Команда, которую необходимо выполнить в контейнере.
      #command: whoami
    # Директории, разделитель двоеточие, где первая, локальная директория, вторая в контейнере, содержащие одно и тоже
    volumes:
      # Тире в начале обязательно, это означает список, т.к. подключаемых директорий может быть много
      # `./` в начале означают, что директорию нужно искать относительно текущего файла docker-compose.yml
      - ./app:/webAppDir
    # Имя контейнера, где могут использоваться переменные с файла .env, расположенного в той же директории
    container_name: ${PROJECT_NAME}-php-fpm
    # В случае остановки, возобновлять работу контейнера
    restart: always
    # Запуск контейнера (php-fpm) зависит от того, запущен ли указанный (mysql), т.е. ждем, пока не запустится (mysql)

